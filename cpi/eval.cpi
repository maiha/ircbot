#!/usr/bin/ruby -Ke

require 'parsedate'

class EvalAgent
  def do_help (message)
    nick = message[:client].config[:nick]
    <<-HELP
[Rubyコードの実行]($SAFE=4)
コマンド: #{nick}.eval (RUBY_CODE)
時間指定: #{nick}.eval_at (DATE, RUBY_CODE) # デリミタは半角カンマ
    HELP
  end

  def safe_eval (code, level = 4)
    thread = Thread .new {
      $SAFE = level
      eval(code)
    }
    return thread .value
  end

  def date2time (date, now = Time .now)
    date    = date .to_s
    delay   = 0
    special = nil
    year, mon, day, hour, min, sec, = ParseDate::parsedate(date)
    year ||= now .year
    mon  ||= now .mon
    day  ||= now .day
    hour ||= now .hour
    min  ||= now .min
    sec  ||= 0

    special =
      case date
      when /(今日|きょう|today)/i	; :today
      when /(明日|あした|tomorrow)/i	; delay = 86400; :today
      when /(明後日|あさって)/i		; delay = 86400*2; :today
      when /(来週|らいしゅう)/i		; delay = 86400*7; :today
      when /(来月|らいげつ)/i		; :next_month
      when /(夜中|よなか|midnight)/i	; :next_midnight
      else				; nil
      end

    case special
    when :today
      year, mon, day = now.year, now.mon, now.day
    when :next_midnight
      year, mon, day = now.year, now.mon, now.day
      hour, min, sec = 0, 0, 0
      delay = 86400
    when :next_month
      year, mon, day = now.year, now.mon + 1, now.day
      if mon == 13
	year += 1
	mon = 1
      end
    end

    Time .mktime(year, mon, day, hour, min, sec) + delay
  end

  def do_command (msg)
    case msg[:command].to_s
    when /^eval_at/
      date, code = msg[:arg] .to_s .split(',', 2)
      now  = Time .now
      time = date2time(date, now)

      unless code
	return "error: RUBY_CODE がないにゃ。(date=#{time})"
      end

      unless time > now
	return "error: もう過ぎてるにゃ。"
      end

      Thread .new {
  	sleep time - now
  	msg[:command] = 'eval'
 	msg[:arg]     = code
 	do_command(msg)
      }
      return "#{time} になったら実行するにゃ。"

    when /^eval/
      Thread .new {
	begin
	  obj = safe_eval(msg[:arg])
	  msg .reply(obj || obj.inspect)
	rescue Exception => err
	  msg .reply(err .to_s)
	end
      }
    end
    return nil
  end
end

if $0 == __FILE__

  code  = 'A'			# force error
  hash  = {:from, :AnnaChan, :command, 'eval', :arg, code}
  agent = EvalAgent .new
  p agent .do_command(hash)
  sleep 2
  exit
end


EvalAgent .new
